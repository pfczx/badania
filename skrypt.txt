install.packages("pmr") 
library('pmr')

#AHP
m <- matrix(c(
  # Kryteria:   Sta  Wyd  Bez  Obs  Opr  Narz Społ Komp Koszt Pers
  1,            4,   4,   5,   4,   1,   5,   4,   2,   2,      # Stabilność
  
  1/4,          1,   1,   2,   1,   1/4, 2,   1,   1/3, 1/3,    # Wydajność
  
  1/4,          1,   1,   2,   1,   1/4, 2,   1,   1/3, 1/3,    # Bezpieczeństwo

  1/5,          1/2, 1/2, 1,   1/2, 1/5, 1,   1/2, 1/4, 1/4,    # Łatwość obsługi
  
  1/4,          1,   1,   2,   1,   1/4, 2,   1,   1/3, 1/3,    # Oprogramowanie
  
  1,            4,   4,   5,   4,   1,   5,   4,   2,   2,      # Narzędzia
  
  1/5,          1/2, 1/2, 1,   1/2, 1/5, 1,   1/2, 1/4, 1/4,    # Społeczność
  
  1/4,          1,   1,   2,   1,   1/4, 2,   1,   1/3, 1/3,    # Kompatybilność
  
  1/2,          3,   3,   4,   3,   1/2, 4,   3,   1,   1,      # Koszt
  
  1/2,          3,   3,   4,   3,   1/2, 4,   3,   1,   1       # Personalizacja
), nrow = 10, byrow = TRUE)

weights <- ahp(m)

#Topsis
decision_matrix <- matrix(c(
  7, 6, 9, 5, 5, 8, 8, 7, 9, 7,     # Ubuntu
  5, 8, 9, 4, 5, 9, 6, 7, 9, 9,     # Fedora
  6, 3, 3, 9, 9, 4, 6, 9, 4, 4,     # Windows
  9, 7, 8, 6, 8, 7, 6, 3, 2, 5      # macOS
), nrow = 4, byrow = TRUE)

alternatives <- c("Ubuntu", "Fedora", "Windows", "macOS")


#Normalizacja 
norm_matrix <- decision_matrix / sqrt(colSums(decision_matrix^2))

#Pomnożenie przez wagi
weighted_matrix <- norm_matrix * as.numeric(weights$weighting)

#Ideał (max) i antyideał (min)
ideal_best <- apply(weighted_matrix, 2, max)
ideal_worst <- apply(weighted_matrix, 2, min)

#Dystanse do ideału i antyideału
distance_to_best <- sqrt(rowSums((weighted_matrix - matrix(ideal_best, nrow=4, ncol=10, byrow=TRUE))^2))
distance_to_worst <- sqrt(rowSums((weighted_matrix - matrix(ideal_worst, nrow=4, ncol=10, byrow=TRUE))^2))

#Wartość TOPSIS
topsis_score <- distance_to_worst / (distance_to_best + distance_to_worst)

#Ranking
ranking <- order(topsis_score, decreasing = TRUE)

#Wyniki
result <- data.frame(
  System = alternatives,
  TopsisScore = topsis_score
)
print(result)
print(weights$Saaty)

#ANALIZA WRAŻLIWOŚCI
# Funkcja obliczająca wynik TOPSIS
calculate_topsis <- function(weights_vec) {
  weighted_matrix <- norm_matrix * weights_vec
  ideal_best <- apply(weighted_matrix, 2, max)
  ideal_worst <- apply(weighted_matrix, 2, min)
  d_plus <- sqrt(rowSums((weighted_matrix - matrix(ideal_best, nrow=4, ncol=10, byrow=TRUE))^2))
  d_minus <- sqrt(rowSums((weighted_matrix - matrix(ideal_worst, nrow=4, ncol=10, byrow=TRUE))^2))
  score <- d_minus / (d_plus + d_minus)
  return(score)
}

# Funkcja do analizy wrażliwości
sensitivity_analysis <- function(index, criterion_name) {
  original_weight <- weights$weighting[index]
  sensitivity_range <- seq(0.5, 1.5, by = 0.1) * original_weight
  result <- data.frame()
  
  for (new_weight in sensitivity_range) {
    modified_weights <- weights$weighting
    modified_weights[index] <- new_weight
    modified_weights <- modified_weights / sum(modified_weights)
    score <- calculate_topsis(modified_weights)
    
    result <- rbind(result, data.frame(
      Kryterium = criterion_name,
      Zmiana_wagi = round((new_weight / original_weight - 1) * 100),
      Ubuntu = score[1],
      Fedora = score[2],
      Windows = score[3],
      macOS = score[4]
    ))
  }
  
  return(result)
}

# Przeprowadzenie analizy
sensitivity_bez <- sensitivity_analysis(3, "Bezpieczeństwo")
sensitivity_obs <- sensitivity_analysis(4, "Łatwość obsługi")
sensitivity_wyd <- sensitivity_analysis(2, "Wydajność")

# Połączenie wyników
sensitivity_all <- rbind(sensitivity_bez, sensitivity_obs, sensitivity_wyd)

# Wyświetlenie tabeli
print(sensitivity_all)
